# -*- coding: utf8 -*-
import telebot
from telebot import types
from telebot.types import InputMediaPhoto
import requests
import sqlite3
import random
import string
import threading
import time
from random import randint,choice
import json
from random import randint
from config import token,admins,poderjka,adminvxod,worker,minimalka,maximalka,vyplaty,fakeqiwi,\
minstavka,maxbalancestatus0,maxbalancestatus2,bot_username,maxpromo,otzyvy
from otvet import userbtn1,userbtn2,userbtn3,userbtn4,userbtn5,userbtn6,activ1,activ2,activ3,activ4,activ5,activ6,select,\
	otmena,verx,vniz,rovno,balanceqiwi,balancepromo,qiwiorpromo,oplata,proverit,rem,workerpanel,workerinfo,defpoderjka, defonas
from otvet import pravila,soglashenie,user,start,start2,akcii,popolnenie,cancel,adminpanel,igrabtn,textotzyv,balancecard
from baza import getbalance,deleteoplata,getstatus

bot=telebot.TeleBot(token)
admin = admins[0]


con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute('''CREATE TABLE if not exists card(num int)''')
con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute(f"select count(*) from card")
if cur.fetchone()[0] == 0:
	con.commit()
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"INSERT INTO card (num) "
		f"VALUES ({7777777777})")
	con.commit()


con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute('''CREATE TABLE if not exists oplatac(n int,id int,summ int)''')
con.commit()

@bot.message_handler(commands=['start'])
def send_welcome(message):
	print(message.chat.id)
	

	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"select count(*) from users where id = {message.chat.id}")
	if cur.fetchone()[0] == 0:
		con.commit()
		ref = message.text
		if len(ref) != 6:
			try:
				ref = int(ref[7:])
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from users where id = {ref}")
				if cur.fetchone()[0] != 0:
					con.commit()
					boss = ref
				else:
					con.commit()
					boss = admin

			except:
				boss = admin
		else:
			boss = admin
		id = message.chat.id
		name = (f"{message.chat.first_name}")		
		user_name = message.chat.username
		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"INSERT INTO users (id,name,boss, username,balance,status) "
			f"VALUES ({id},\"{name}\",{boss}, \"{user_name}\",{0},{0})")
		con.commit()
		
		
		bot.send_message(boss, f"üêò –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: [{message.chat.first_name}](tg://user?id={message.chat.id})",parse_mode='Markdown')
		bot.send_message(message.chat.id,pravila,reply_markup=soglashenie())
	else:
		con.commit()

		bot.send_message(message.chat.id,start2,reply_markup=user())


@bot.message_handler(content_types=['text'])
def main_message(message):
	gif = open('profile.gif', 'rb')
	smileys = ['üü¢', 'üîµ', 'üî¥', 'üü°']
	smileys1 = ['üü¢', 'üîµ', 'üî¥', 'üü°']
	smileys2 = ['üü¢', 'üîµ', 'üî¥', 'üü°']
	smiley = random.choice(smileys)
	smiley1 = random.choice(smileys1)
	smiley2 = random.choice(smileys2)
	username = message.from_user.first_name
	if message.text == userbtn1:
		bot.send_message(message.chat.id,select,reply_markup=akcii())
		bot.register_next_step_handler(message,stavka)
	elif message.text == userbtn2:
		try:
			
			bot.send_animation(message.chat.id, gif, caption=f"üíª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç <b>{username}</b>\n\n"+
												f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"+
												f"üíµ  –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{getbalance(message.chat.id)}‚ÇΩ</b>\n"+
												f"üóÑ ID: <code>{message.chat.id}</code>\n\n"+
												f"üíº <i>–ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:</i>\n <b>0.0 BTC\n 0.0 ETH\n 0.0 LTC</b>\n"+
												f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"+
												f"üìà <i>–ß–∏—Å–ª–æ —Å–¥–µ–ª–æ–∫ –æ–Ω–ª–∞–π–Ω</i><b> - {randint(1000,1300)}</b>\n"+
												f"üìâ <i>–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω</i><b> - {randint(1400,1800)}</b>\n"+
												f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
												f"<b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Bitcoin: {smiley}</b>\n"+
												f"<b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Ethereum: {smiley1}</b>\n"+
												f"<b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Litecoin: {smiley2}</b>",
												parse_mode='HTML')
			gif.close()
		except Exception as e:
			bot.send_message(message.chat.id,"–£–ø—Å...–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n–ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
		
		
	elif message.text == userbtn3:
		gif_popolnenie = open('popolnenie.gif', 'rb')
		bot.send_animation(message.chat.id,gif_popolnenie,caption=qiwiorpromo,parse_mode='HTML',reply_markup=popolnenie())
		bot.register_next_step_handler(message,qorp)
	elif message.text == userbtn4:
		

		bot.send_message(message.chat.id,parse_mode='HTML',text=f"üí∞<i> –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞</i>\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ : <b>{getbalance(message.chat.id)}‚ÇΩ</B>",reply_markup=cancel())
		bot.register_next_step_handler(message,vyvod)
	elif message.text == userbtn5:
		gif_support = open('support.gif', 'rb')
		bot.send_animation(message.chat.id, gif_support,
		   caption=poderjka,
		   parse_mode='HTML',
		   reply_markup=defpoderjka())
	elif message.text == userbtn6:
		gif_onas = open('onas.gif', 'rb')
		bot.send_animation(message.chat.id, gif_onas, reply_markup=defonas())
	elif message.text == adminvxod and message.chat.id in admins:
		bot.send_message(message.chat.id,"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=adminpanel())
	elif message.text == worker:
		bot.send_message(message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={message.chat.id}</code>",reply_markup=workerpanel())	
	elif message.text == otmena:
		bot.send_message(message.chat.id,"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=user())
	

		



		
		






@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	if call.message:
		if call.data == "prinyal":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text =start)

			stickers = ["CAACAgIAAxkBAAEBQl5gknuRbLCHmgaGBcIGD5PBHkFrpAACfQMAAm2wQgO9Ey75tk26Ux8E","CAACAgIAAxkBAAEBQltgknuNcFszyxM8K4CZAAE5DaTCp20AAuMBAAM4oAr2It69-Lkvbh8E","CAACAgIAAxkBAAEBQlhgknt93f1YsqZdlpP4A5V30hTUSwAC2gUAApb6EgXLSR-bwuR2dh8E","CAACAgEAAxkBAAEBQmFgknwTpqjs6OKKSbC87CFE0SoE2QACHQEAAjgOghHhhIkhaufuiR8E"]
			
			bot.send_sticker(call.message.chat.id,choice(stickers),reply_markup=user())
		elif call.data == "cardcard":
			bot.send_message(call.message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",reply_markup=cancel())
			bot.register_next_step_handler(call.message,replacecard)	
		elif call.data == "qiwi":
			bot.send_message(call.message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω QIWI –∫–æ—à–µ–ª—å–∫–∞:",reply_markup=cancel())
			bot.register_next_step_handler(call.message,replaceqiwi)
		elif call.data == "send":		
			
			bot.send_message(call.message.chat.id,"üì© –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—ã–ª–∫–∏",reply_markup=cancel())
			bot.register_next_step_handler(call.message,rass)
		elif call.data == "stat":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"SELECT COUNT (*) FROM users")
			number = cur.fetchone()[0]
			con.commit()
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - {number}")
			bot.send_message(call.message.chat.id,"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",reply_markup=adminpanel())	
		elif call.data == "prov":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select status from oplata where id = {call.message.chat.id}")
			paystatus = cur.fetchone()[0]
			con.commit()
			if paystatus == 0:


				user_id = call.message.chat.id
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select num from qiwi")
				qiwinumber = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select token from qiwi")
				token_qiwi = cur.fetchone()[0]
				con.commit()

				QIWI_TOKEN = token_qiwi
				QIWI_ACCOUNT = str(qiwinumber)
				s = requests.Session()
				s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN
				parameters = {'rows': '50'}
				h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + QIWI_ACCOUNT + '/payments',params=parameters)
				req = json.loads(h.text)
				try:
					cur.execute(f"SELECT * FROM oplata WHERE id = {user_id}")
					result = cur.fetchone()
					comment = str(result[1])

					for x in range(len(req['data'])):
						
						if req['data'][x]['comment'] == comment:
							
							skolko = (req['data'][x]['sum']['amount'])
							cur.execute(f"DELETE FROM oplata WHERE id = {user_id}")
							con.commit()


							
							
							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select balance from users WHERE id = {call.message.chat.id}")
							balancenow = cur.fetchone()[0]
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"UPDATE users SET balance = {balancenow+skolko} WHERE id = {call.message.chat.id}")
							con.commit()

							cur.execute(f"SELECT boss FROM users WHERE id = {user_id}")

							for worker in cur.execute(f"SELECT boss FROM users WHERE id = {user_id}"):
								wk = worker[0]
							cur.execute(f"SELECT username FROM users WHERE id = {wk}")

							for username in cur.execute(f"SELECT username FROM users WHERE id = {wk}"):
								workerusername = username[0]
							for name in cur.execute(f"SELECT name FROM users WHERE id = {wk}"):
								workername = name[0]

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select name from users where id = {call.message.chat.id}")
							mamont = cur.fetchone()[0]
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select p from procent")
							dolya = cur.fetchone()[0]
							con.commit()	
							

							

							bot.send_message(vyplaty,f"üçÄ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üçÄ\nüí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è :{skolko}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:{round((dolya*skolko)/100)}\nüë®‚Äçüíª –í–æ—Ä–∫–µ—Ä :@{workerusername}",parse_mode='Markdown')
							bot.send_message(admin,f"[{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB",parse_mode='Markdown')
							bot.send_message(wk,f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª: [{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB",parse_mode='Markdown')
							bot.send_message(call.message.chat.id,f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow+skolko} RUB",reply_markup=user())
							bot.send_message(vyplaty,f"üçÄ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üçÄ\nüí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è :{skolko}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:{round((dolya*skolko)/100)}\nüë®‚Äçüíª –í–æ—Ä–∫–µ—Ä :@{workerusername}",parse_mode='Markdown')
						


							
							break
						else:
							bot.send_message(call.message.chat.id,"‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")
							
							break

				except:
					pass
			else:
				
				
				
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select balance from users WHERE id = {call.message.chat.id}")
				balancenow = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select summ from oplata WHERE id = {call.message.chat.id}")
				skolko = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE users SET balance = {balancenow+skolko} WHERE id = {call.message.chat.id}")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE FROM oplata WHERE id = {call.message.chat.id}")
				con.commit()

				bot.send_message(call.message.chat.id,f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow+skolko} RUB",reply_markup=user())
		elif call.data == 'prov2':
			try:
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"SELECT summ FROM oplatac where id = {call.message.chat.id}")
				sa = cur.fetchone()[0]
				con.commit()

				

				k = types.InlineKeyboardMarkup()
				k1 = types.InlineKeyboardButton(text="–í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data="vyplata")
				k2 = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="otklon")

				k.add(k1)
				k.add(k2)
				bot.send_message(call.message.chat.id, text ="‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–æ–±—â–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É", reply_markup=user())
				
				bot.send_message(admin, f"ID –ø–ª–∞—Ç–µ–∂–∞ `{call.message.chat.id}`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.first_name} –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞.\n–°—É–º–º–∞ {sa}",reply_markup=k,parse_mode='Markdown')
				bot.send_message(admins[1], f"ID –ø–ª–∞—Ç–µ–∂–∞ `{call.message.chat.id}`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.first_name} –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞.\n–°—É–º–º–∞ {sa}",reply_markup=k,parse_mode='Markdown')
			except Exception as e:
				raise
			
		elif call.data == 	"vyplata":
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞",reply_markup=cancel())
			bot.register_next_step_handler(call.message, prinyatieplateja2)

		elif call.data == 	"otklon":
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞",reply_markup=cancel())
			bot.register_next_step_handler(call.message, otklonplateja)			
		elif call.data == "zaplatit":
			

			bot.send_message(call.message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ id –ø–ª–∞—Ç–µ–∂–∞",reply_markup=cancel())
			bot.register_next_step_handler(call.message, prinyatieplateja)
				
		elif call.data == "procent":
			bot.send_message(call.message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤",reply_markup=cancel())
			bot.register_next_step_handler(call.message,replaceprocent)			
			
		elif call.data == "cancel":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text ="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")	
			bot.send_message(call.message.chat.id,"üëª",reply_markup=user())
		elif call.data == "smsm":
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:–ü–æ—Å—Ç–∞–≤–∏—Ç–µ —á–µ—Ç–≤–µ—Ä–∫—É?",reply_markup=cancel())
			bot.register_next_step_handler(call.message,mamontmessage)
		elif call.data == "rassw":
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=cancel())
			bot.register_next_step_handler(call.message,rassmamontmessage)
		elif call.data == "spisok":


			con = sqlite3.connect("data.db")
			cur = con.cursor()			
			cur.execute(f"SELECT count(*) FROM users where boss = {call.message.chat.id}")
			countwstat = cur.fetchone()[0]
			con.commit()

			if countwstat == 0:
				bot.send_message(call.message.chat.id, f"–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
			else:	

			
				con = sqlite3.connect("data.db")
				cur = con.cursor()			
				cur.execute(f"SELECT id FROM users where boss = {call.message.chat.id}")
				wstat = cur.fetchall()
				con.commit()

							

				strw = "üêò –¢–≤–æ–∏ –†–µ—Ñ–µ—Ä–∞–ª—ã üêò\n\n"

				countstrw = len(wstat)//50
				arrstatw = []
				
				for i in wstat:
					try:
						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"SELECT name FROM users where id = {i[0]}")
						statwname = cur.fetchone()[0]
						con.commit()

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"SELECT username FROM users where id = {i[0]}")
						statwusername = cur.fetchone()[0]
						con.commit()

						imya = statwname
						
						strw = f"{i[0]} | {imya} | {statwusername} | {getstatus(i[0])} | {getbalance(i[0])}\n"
						arrstatw.append(strw)
					except:
						pass
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = "üêò üêò üêò")
				
				spisokmamont = "" 
				if(len(arrstatw)>50):
					newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
					for m1 in newarrstatw:
						for m2 in m1:
							
							spisokmamont+=m2							

								
						bot.send_message(call.message.chat.id, f"{spisokmamont}")
						spisokmamont = ""
						

						

				else:
					for i in arrstatw:
						spisokmamont += i
					bot.send_message(call.message.chat.id, f"{spisokmamont}")

			bot.send_message(call.message.chat.id, "–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å‚öôÔ∏è", reply_markup = workerpanel())	
		elif call.data == "statw":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"SELECT Count(*) FROM users where boss = {call.message.chat.id}")
			countstatw = cur.fetchone()[0]
			con.commit()
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f"—É —Ç–µ–±—è {countstatw} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
			bot.send_message(call.message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={call.message.chat.id}</code>",reply_markup=workerpanel())	

		elif call.data == "prom":
			bot.send_message(call.message.chat.id, "üéÅ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:")
			bot.register_next_step_handler(call.message, create_promo)

		elif call.data == "infworker":
			
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = workerinfo)
			bot.send_message(call.message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={call.message.chat.id}</code>",reply_markup=workerpanel())	
		elif call.data == "statusreplace":
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ —Å—Ç–∞—Ç—É—Å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:0",reply_markup=cancel())
			bot.register_next_step_handler(call.message,workstatus)
		elif call.data == "admbalance":
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –ë–∞–ª–∞–Ω—Å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:1000",reply_markup=cancel())
			bot.register_next_step_handler(call.message,dobavleniebalance)	
					


@bot.message_handler(content_types=['text'])
def replacecard(message):
	try:
		if message.chat.id in admins:
			newqiwi = message.text

			if newqiwi == otmena:
				bot.send_message(message.from_user.id,f"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
				bot.register_next_step_handler(message, main_message)
			else:

				if(message.text.isdigit()):



					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE card SET num = {int(message.text)}")
					con.commit()

					

					bot.send_message(message.chat.id,f"–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",reply_markup=user())
					bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.from_user.id,f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, replaceqiwi)
				
			
			

		

	except Exception as e:
		raise
@bot.message_handler(content_types=['text'])
def replaceqiwi(message):
	try:
		if message.chat.id in admins:
			newqiwi = message.text

			if newqiwi == otmena:
				bot.send_message(message.chat.id,f"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
				bot.register_next_step_handler(message, main_message)
			else:
				
				
				def get_profile(api_access_token):
					s7 = requests.Session()
					s7.headers['Accept']= 'application/json'
					s7.headers['authorization'] = 'Bearer ' + api_access_token
					p = s7.get('https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true')
					return p.json()

				

				try:
					api_access_token = newqiwi
					profile = get_profile(api_access_token)

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE qiwi SET num = {int(profile['contractInfo']['contractId'])}")
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE qiwi SET token = \'{newqiwi}\'")
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE qiwi SET nick = \'{profile['contractInfo']['nickname']['nickname']}\'")
					con.commit()

					bot.send_message(message.chat.id,f"–î–∞–Ω–Ω—ã–µ –∫–∏–≤–∏ –∏–∑–º–µ–Ω–µ–Ω—ã\n\n–ù–æ–º–µ—Ä: {profile['contractInfo']['contractId']}\n–¢–æ–∫–µ–Ω: {newqiwi}\n–ù–∏–∫–Ω–µ–π–º: {profile['contractInfo']['nickname']['nickname']}",reply_markup=user())
					bot.register_next_step_handler(message, main_message)
				except Exception as e:
					bot.send_message(message.from_user.id,f"–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω,–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π.")
					bot.register_next_step_handler(message, replaceqiwi)
				

	except Exception as e:
		raise				



@bot.message_handler(content_types=['text'])
def rass(message):
	if message.chat.id in admins:


		if message.text == otmena:
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=user())
			bot.register_next_step_handler(message, main_message)

		else:	
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞")
			cur.execute("SELECT id FROM users")
			id = cur.fetchall()
			def allrass():

				for i in id:
					try:
						bot.send_message(i[0], f"{message.text}")
						time.sleep(0.1)
					except:
						pass
				bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",reply_markup=user())
			t4 = threading.Thread(target=allrass)
			t4.start()	
			bot.register_next_step_handler(message, main_message)


@bot.message_handler(content_types=['text'])
def qorp(message):
	gif_popolnenie = open('popolnenie.gif', 'rb')
	if message.text == balanceqiwi:
		bot.send_animation(message.chat.id,gif_popolnenie,caption=f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:<i>\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {minimalka}‚ÇΩ</i>",parse_mode='HTML',reply_markup=cancel())
		bot.register_next_step_handler(message, popolni)
	elif message.text == balancepromo:
		bot.send_message(message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥",reply_markup=cancel())
		bot.register_next_step_handler(message, promo)
	elif message.text == balancecard:
		bot.send_animation(message.chat.id,gif_popolnenie,caption=f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:<i>\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {minimalka}‚ÇΩ</i>",parse_mode='HTML',reply_markup=cancel())
		bot.register_next_step_handler(message, popolnicard)	
		
	elif message.text == otmena:
		bot.send_message(message.chat.id,"‚Ü™Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=user())
		bot.register_next_step_handler(message, main_message)







@bot.message_handler(content_types=['text'])
def popolnicard(message):
	gif_popolnenie = open('popolnenie.gif', 'rb')
	try:
		if message.text.isdigit():
			skolko = int(message.text)
			if skolko >= minimalka and skolko <=maximalka:
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE from oplatac where id = {message.chat.id}")

				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()

				cur.execute(f"INSERT INTO oplatac (id,summ) VALUES({message.chat.id},{skolko})")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select num from card")
				cardnumber = cur.fetchone()[0]
				con.commit()


				texttt = f'‚ôªÔ∏è<b> –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:</b>\n\n–°—É–º–º–∞: <b>{skolko}‚ÇΩ</b>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{cardnumber}</code>\n\n<i>‚ö†Ô∏è –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç!\n‚ö†Ô∏è –í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</i>'

				markup_inline = types.InlineKeyboardMarkup()

				proverka = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' ,callback_data='prov2')

				markup_inline.add(proverka)


				bot.send_animation(message.from_user.id,gif_popolnenie,caption=texttt,parse_mode='HTML',reply_markup=markup_inline)
				bot.register_next_step_handler(message, main_message)	
			else:
				bot.send_message(message.chat.id,f"‚ùóÔ∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {minimalka}")
				bot.register_next_step_handler(message, popolni)
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æc",reply_markup=user())
			bot.register_next_step_handler(message, main_message)		

		else:
			bot.send_message(message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, popolni)	
	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def popolni(message):
	gif_popolnenie = open('popolnenie.gif', 'rb')
	try:
		if message.text.isdigit():
			skolko = int(message.text)
			if skolko >= minimalka and skolko <=maximalka:
				try:
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"DELETE FROM oplata WHERE id = {message.chat.id}")
					con.commit()
				except Exception as e:
					raise
				
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				comment = randint(10000, 9999999)
				cur.execute(f"INSERT INTO oplata (id, code,status,summ) VALUES({message.chat.id},{comment},{0},{skolko})")
				con.commit()
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select boss from users where id = {message.chat.id}")
				refer = cur.fetchone()[0]
				con.commit()

				wb = types.InlineKeyboardMarkup()			
				wb1 = types.InlineKeyboardButton(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å" ,callback_data='zaplatit')
				wb.add(wb1)
				bot.send_message(refer,f"ID: `{message.chat.id}`\n\n–†–µ—Ñ–µ—Ä–∞–ª [{message.chat.first_name}](tg://user?id={message.chat.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n–°—É–º–º–∞: {skolko}",reply_markup=wb,parse_mode='Markdown')

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select nick from qiwi")
				qiwinick = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select num from qiwi")
				qiwinumber = cur.fetchone()[0]
				con.commit()

				

				link = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={qiwinumber}&amountInteger={skolko}&amountFraction=0&currency=643&extra%5B%27comment%27%5D={comment}&blocked[0]=sum&blocked[1]=account&blocked[2]=comment"

				kb = types.InlineKeyboardMarkup()
				kb1 = types.InlineKeyboardButton(text=oplata, callback_data="site", url=link)
				kb2 = types.InlineKeyboardButton(text=proverit ,callback_data='prov')
				kb.add(kb1)
				kb.add(kb2)

				texttt = f'‚ôªÔ∏è <b>–û–ø–ª–∞—Ç–∞ QIWI: <a href="{link}">–û–ü–õ–ê–¢–ê</a></b>\n\n<b>–ù–æ–º–µ—Ä:</b> <code>{qiwinumber}</code>\n<b>–°—É–º–º–∞:</b> <code>{skolko}‚ÇΩ</code>\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <code>{comment}</code>\n\n<i>‚ö†Ô∏è –í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</i>'

				bot.send_animation(message.from_user.id,gif_popolnenie,caption=texttt,parse_mode='HTML',reply_markup=kb)
				

				# bot.send_message(message.chat.id,f"üìà –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:[–û–ø–ª–∞—Ç–∞]({link})\n\n–° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: `{comment}`\n\n–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É! –ï—Å–ª–∏ –í—ã –Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á—ë—Ç!",reply_markup=kb,parse_mode='Markdown')
			else:
				bot.send_message(message.chat.id,f"‚ùóÔ∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {minimalka}")
				bot.register_next_step_handler(message, popolni)
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)		

		else:
			bot.send_message(message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, popolni)	
	except Exception as e:
		raise

@bot.message_handler(content_types=['text'])
def prinyatieplateja2(message):
	try:
		if message.chat.id in admins:
			if message.text == otmena:
				bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
				bot.register_next_step_handler(message, main_message)
			else:


				if message.text.isdigit():

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select count(*) from oplatac where id = {int(message.text)}")
					inn = cur.fetchone()[0]
					con.commit()

					if inn == 0:
						bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
						bot.register_next_step_handler(message, prinyatieplateja2)
					else:

						

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select summ from oplatac where id = {int(message.text)}")
						isumm = cur.fetchone()[0]
						con.commit()

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select balance from users where id = {int(message.text)}")
						ibn = cur.fetchone()[0]
						con.commit()

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"UPDATE users SET balance = {ibn+isumm} where id = {int(message.text)}")
						
						con.commit()

						skolko = isumm
						user_id = int(message.text)
						cur.execute(f"SELECT boss FROM users WHERE id = {user_id}")

						for worker in cur.execute(f"SELECT boss FROM users WHERE id = {user_id}"):
							wk = worker[0]
						cur.execute(f"SELECT username FROM users WHERE id = {wk}")

						for username in cur.execute(f"SELECT username FROM users WHERE id = {wk}"):
							workerusername = username[0]
						for name in cur.execute(f"SELECT name FROM users WHERE id = {wk}"):
							workername = name[0]

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select name from users where id = {user_id}")
						mamont = cur.fetchone()[0]
						con.commit()

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select p from procent")
						dolya = cur.fetchone()[0]
						con.commit()	
						

						

						bot.send_message(vyplaty,f"üçÄ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üçÄ\nüí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è :{skolko}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:{round((dolya*skolko)/100)}\nüë®‚Äçüíª –í–æ—Ä–∫–µ—Ä :@{workerusername}",parse_mode='Markdown')
						bot.send_message(-1001676122456,f"üçÄ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üçÄ\nüí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è :{skolko}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:{round((dolya*skolko)/100)}\nüë®‚Äçüíª –í–æ—Ä–∫–µ—Ä :@{workerusername}",parse_mode='Markdown')
						
						

						bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")
						bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, prinyatieplateja2)





		
	except Exception as e:
		raise
	

@bot.message_handler(content_types=['text'])
def otklonplateja(message):
	try:
		if message.chat.id in admins:
		
	
	
			if message.text == otmena:
				bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
				bot.register_next_step_handler(message, main_message)
			else:
				if message.text.isdigit():

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select count(*) from oplatac where id = {int(message.text)}")
						inn = cur.fetchone()[0]
						con.commit()

						if inn == 0:
							bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
							bot.register_next_step_handler(message, otklonplateja)
						else:
			
							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select id from oplatac where id = {int(message.text)}")
							i = cur.fetchone()[0]
							con.commit()

							bot.send_message(i, "–í–∞—à –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω !")
							bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!",reply_markup=user())
							bot.register_next_step_handler(message, main_message)
				else:
					bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, otklonplateja)
	except Exception as e:
		raise	


@bot.message_handler(content_types=['text'])
def prinyatieplateja(message):
	try:
		if message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:


			if message.text.isdigit():

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from oplata where id = {int(message.text)}")
				inn = cur.fetchone()[0]
				con.commit()

				if inn == 0:
					bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
					bot.register_next_step_handler(message, prinyatieplateja)
				else:			

					

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE oplata SET status = {1} where id = {int(message.text)}")
					
					con.commit()

					
					bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!",reply_markup=user())
					bot.register_next_step_handler(message, main_message)

			else:
				bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
				bot.register_next_step_handler(message, prinyatieplateja)





		
	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def vyvod(message):
	try:
		if message.text.isdigit():
			if int(message.text) > 0:
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select balance from users WHERE id = {message.chat.id}")
				balancevyvod = cur.fetchone()[0]
				con.commit()

				

				if balancevyvod<int(message.text):
					bot.send_message(message.chat.id, "–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",reply_markup=user())
					bot.register_next_step_handler(message, main_message)
				else:
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"DELETE FROM payments WHERE id = {message.chat.id}")
					con.commit()


					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"INSERT INTO payments (summ,id) VALUES ({int(message.text)},{message.chat.id})")
					con.commit()

					koshelki = types.ReplyKeyboardMarkup(True)
					kk1 = types.KeyboardButton("–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞")
					kk2 = types.KeyboardButton("QIWI")
					koshelki.add(kk1,kk2)
					
					bot.send_message(message.chat.id,parse_mode='HTML' ,text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑:</b>",reply_markup=koshelki)
					bot.register_next_step_handler(message, walletw)
					



			else:
				bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
				bot.register_next_step_handler(message, vyvod)	
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)		
		else:
			bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
			bot.register_next_step_handler(message, vyvod)	

	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def walletw(message):
	try:
		wallets = ["–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞","QIWI"]
		if message.text in wallets:
			bot.send_message(message.chat.id,parse_mode='HTML',text="<b>üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>",reply_markup=cancel())
			bot.register_next_step_handler(message, wallet)
		else:
			bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
			bot.register_next_step_handler(message, walletw)
	except Exception as e:
		raise
	
	
		



@bot.message_handler(content_types=['text'])
def wallet(message):
	try:
		if message.text.isdigit():
			if len(message.text)>5 and len(message.text)<20:

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select status from users WHERE id = {message.chat.id}")
				pmst = cur.fetchone()[0]
				con.commit()

				if pmst == 1:
					bot.send_message(message.chat.id, parse_mode='HTML',text="üõë <b>–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ <b>@swisstochek</b></i>",reply_markup=user())
				else:	


					if int(message.text) == fakeqiwi:

						

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select summ from payments WHERE id = {message.chat.id}")
						summpay = cur.fetchone()[0]
						con.commit()

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select balance from users WHERE id = {message.chat.id}")
						bn = cur.fetchone()[0]
						con.commit()

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"UPDATE users SET balance = {bn-summpay} where id = {message.chat.id}")
						con.commit()


						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"DELETE FROM payments WHERE id = {message.chat.id}")
						con.commit()

						bot.send_message(message.chat.id,parse_mode='HTML' ,text="<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b> \n\n<i>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.</i>",reply_markup=user())
						bot.register_next_step_handler(message, main_message)




					else:
						bot.send_message(message.chat.id, parse_mode='HTML', text="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å.")
						bot.register_next_step_handler(message, wallet)	

			else:
				bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑")
				bot.register_next_step_handler(message, wallet)	
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:
			bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ +")
			bot.register_next_step_handler(message, wallet)	


	except Exception as e:
		raise
	
	


@bot.message_handler(content_types=['text'])
def stavka(message):
	try:
		if message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:
			activs = [activ1,activ2,activ3,activ4,activ5,activ6]	
			if message.text in activs:
				
				bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - {minstavka}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {getbalance(message.chat.id)}",reply_markup=cancel())
				bot.register_next_step_handler(message, igra)
			else:
				bot.send_message(message.chat.id,"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é")
				bot.register_next_step_handler(message, stavka)
					

			
	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def igra(message):
	try:
		if message.text.isdigit():
			if int(message.text) >= minstavka:
				

				if int(message.text)<=getbalance(message.chat.id):
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"DELETE FROM stavka WHERE id = {message.chat.id}")
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"INSERT INTO stavka (id,summ) VALUES ({message.chat.id},{int(message.text)})")
					con.commit()
					bot.send_message(message.chat.id, f"–í–∞–º –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å –∫—É–¥–∞ –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫–Ω—É–¥\n\n–ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—ã–º –≤–∞—à –≤—ã–∏–≥—Ä—ã—à –±—É–¥–µ—Ç\n–í–≤–µ—Ä—Ö - x2 –æ—Ç —Å—Ç–∞–≤–∫–∏\n–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è - x100 –æ—Ç —Å—Ç–∞–≤–∫–∏\n–í–Ω–∏–∑ - x2 –æ—Ç —Å—Ç–∞–≤–∫–∏",reply_markup=igrabtn())


					

					
					bot.register_next_step_handler(message, igraem)

				else:
					bot.send_message(message.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {getbalance(message.chat.id)}")
					bot.register_next_step_handler(message, igra)


			else:
				bot.send_message(message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {minstavka}")
				bot.register_next_step_handler(message, igra)
		
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)		
		else:
			bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, igra)
			
	except Exception as e:
		raise
	


@bot.message_handler(content_types=['text'])
def igraem(message):
	try:
		statusi = [0,1,2]
		if (getstatus(message.chat.id) in statusi) is False:
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE users SET status = {0} where id = {message.chat.id}")
			con.commit()



		



		if getstatus(message.chat.id) == 0 and getbalance(message.chat.id) >= maxbalancestatus0:
			statusgame = 1

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE users SET status = {1} where id = {message.chat.id}")
			con.commit()
		elif getstatus(message.chat.id) == 2 and getbalance(message.chat.id) >= maxbalancestatus2:
			statusgame = 1

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE users SET status = {1} where id = {message.chat.id}")
			con.commit()	


		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"select summ from stavka WHERE id = {message.chat.id}")
		isumm = cur.fetchone()[0]
		con.commit()

		shtobudet = [verx,vniz,rovno]

		if message.text in shtobudet:
			if getstatus(message.chat.id) == 1 or (getstatus(message.chat.id) == 0 and message.text == rovno):


				

				bot.send_message(message.chat.id, f"–°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞",reply_markup=rem)
				kudapoydet = bot.send_message(message.chat.id, f"–ò–¥—ë—Ç —Ä–∞—Å—Å—á—ë—Ç. . .")
				


				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE FROM process WHERE id = {message.chat.id}")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"INSERT INTO process (id,mid) VALUES ({message.chat.id},{kudapoydet.message_id})")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select mid from process where id = {message.chat.id}")
				kudapoydetid = cur.fetchone()[0]
				con.commit()
				
				if message.text == vniz:

					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"+{konec3}% üü¢"
					konec2 = f"–ö—É—Ä—Å –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ {konec3}%"
					
				elif message.text == verx:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"-{konec3}% üî¥"
					konec2 = f"–ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ {konec3}%"
				elif message.text == rovno:
					plusminus = ["+","-"]
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					verxvniz = [f"{choice(plusminus)}{konec3}% üî¥",f"+{konec3}% üü¢"]
					verxorvniz = ["–ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ ","–ö—É—Ä—Å –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ "]
					
					konec = choice(verxvniz)
					konec2 = f"{choice(verxorvniz)}{konec3}%"
					
					
					 

				prcessi = [f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: {konec}"]

				def kuda():
					for xx in prcessi:
						bot.edit_message_text(chat_id=message.chat.id, message_id=kudapoydetid,text =xx)
						time.sleep(0.5)
					
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE users SET balance = {getbalance(message.chat.id)-isumm} where id = {message.chat.id}")
					con.commit()


					bot.send_message(message.chat.id,f"üòî –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ üòî\n{konec2}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {getbalance(message.chat.id)}",reply_markup=cancel())

					bot.register_next_step_handler(message, igra)


				t2 = threading.Thread(target=kuda)
				t2.start()



				

				


				
			elif getstatus(message.chat.id) == 0:
				if message.text == verx or message.text==vniz:
					x=1
				else:
					x=99

				

					

					
				

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE users SET balance = {getbalance(message.chat.id)+(isumm)*x} where id = {message.chat.id}")
				con.commit()

				bot.send_message(message.chat.id, f"–°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞",reply_markup=rem)
				kudapoydet = bot.send_message(message.chat.id, f"–ò–¥—ë—Ç —Ä–∞—Å—Å—á—ë—Ç. . .")
				


				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE FROM process WHERE id = {message.chat.id}")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"INSERT INTO process (id,mid) VALUES ({message.chat.id},{kudapoydet.message_id})")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select mid from process where id = {message.chat.id}")
				kudapoydetid = cur.fetchone()[0]
				con.commit()
				
				if message.text == vniz:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"-{konec3}% üî¥"
					konec2 = f"–ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ {konec3}%"
				elif message.text == verx:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"+{konec3}% üü¢"
					konec2 = f"–ö—É—Ä—Å –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ {konec3}%"
					 

				prcessi = [f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: {konec}"]

				def kuda():
					for xx in prcessi:
						bot.edit_message_text(chat_id=message.chat.id, message_id=kudapoydetid,text =xx)
						time.sleep(0.5)
					
					
					bot.send_message(message.chat.id,f"ü§ë –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—Ä–Ω—ã–º ü§ë\n{konec2}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {getbalance(message.chat.id)}",reply_markup=cancel())

					bot.register_next_step_handler(message, igra)


				t2 = threading.Thread(target=kuda)
				t2.start()

			elif getstatus(message.chat.id) == 2:
				if message.text == verx or message.text==vniz:
					x=1
				else:
					x=99

				

					

					
				

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE users SET balance = {getbalance(message.chat.id)+(isumm)*x} where id = {message.chat.id}")
				con.commit()

				bot.send_message(message.chat.id, f"–°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞",reply_markup=rem)
				kudapoydet = bot.send_message(message.chat.id, f"–ò–¥—ë—Ç —Ä–∞—Å—Å—á—ë—Ç. . .")
				


				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE FROM process WHERE id = {message.chat.id}")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"INSERT INTO process (id,mid) VALUES ({message.chat.id},{kudapoydet.message_id})")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select mid from process where id = {message.chat.id}")
				kudapoydetid = cur.fetchone()[0]
				con.commit()
				
				if message.text == vniz:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"-{konec3}% üî¥"
					konec2 = f"–ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ {konec3}%"
				elif message.text == verx:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"+{konec3}% üü¢"
					konec2 = f"–ö—É—Ä—Å –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ {konec3}%"
				elif message.text == rovno:
					konec3 = f"{0}"
					konec = f"{konec3}% üü°"
					konec2 = f"–ö—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"


					 

				prcessi = [f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: {konec}"]

				def kuda():
					for xx in prcessi:
						bot.edit_message_text(chat_id=message.chat.id, message_id=kudapoydetid,text =xx)
						time.sleep(0.5)
					
					
					bot.send_message(message.chat.id,f"ü§ë –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—Ä–Ω—ã–º ü§ë\n{konec2}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {getbalance(message.chat.id)}",reply_markup=cancel())

					bot.register_next_step_handler(message, igra)


				t2 = threading.Thread(target=kuda)
				t2.start()	


				

				

				


					

				

		
		else:
			bot.send_message(message.chat.id,"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é")
			bot.register_next_step_handler(message, igraem)
			
	except Exception as e:
		raise
	


@bot.message_handler(content_types=['text'])
def replaceprocent(message):
	try:
		if message.chat.id in admins:
			if message.text == "–û—Ç–º–µ–Ω–∞":
				bot.send_message(message.chat.id,f"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=rem)
				bot.send_message(message.chat.id,f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=adminpanel())
				bot.register_next_step_handler(message, main_message)
			else:
				if message.text.isdigit():
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE procent SET p = {int(message.text)}")
					con.commit()

					

					bot.send_message(message.chat.id,f"–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",reply_markup=rem)
					bot.send_message(message.chat.id,f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=adminpanel())
					bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id,f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, replaceprocent)
				
	except Exception as e:
		raise




@bot.message_handler(content_types=['text'])
def mamontmessage(message):

	
	try:

		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit():
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from users where id = {m[0]}")
				est = cur.fetchone()[0]
				con.commit()
				if est == 0:
					bot.send_message(message.chat.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
					bot.register_next_step_handler(message, mamontmessage)
				else:	


					bot.send_message(m[0],m[1])
					bot.send_message(message.chat.id,f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",reply_markup=rem)
					bot.send_message(message.chat.id,f"üêµ –í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å",reply_markup=workerpanel())
					bot.register_next_step_handler(message, main_message)
			else:
				bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, mamontmessage)
		elif message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=rem)
			bot.send_message(message.from_user.id, "–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=workerpanel())
			bot.register_next_step_handler(message, main_message)
					
		else:
			bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, mamontmessage)
			
	except Exception as e:
		raise
	
	
@bot.message_handler(content_types=['text'])
def rassmamontmessage(message):
	
	
	try:
		if message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=rem)
			bot.send_message(message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={message.chat.id}</code>",reply_markup=workerpanel())	
			bot.register_next_step_handler(message, main_message)

		else:	
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞",reply_markup=rem)
			bot.send_message(message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={message.chat.id}</code>",reply_markup=workerpanel())	
			cur.execute(f"SELECT id FROM users where boss = {message.chat.id}")
			id = cur.fetchall()
			def rassmamontw():

				for i in id:
					try:
						bot.send_message(i[0], f"{message.text}")
						time.sleep(0.1)
					except:
						pass
				bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")		
			t3 = threading.Thread(target=rassmamontw)
			t3.start()			
			
			bot.register_next_step_handler(message, main_message)
	except Exception as e:
		raise

@bot.message_handler(content_types=['text'])
def promo(message):

	try:
		testpromo = message.text
		if testpromo == otmena:
			bot.send_message(message.chat.id,"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)

		else:
			
		
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from promocode where code = \'{testpromo}\'")
			
			r = cur.fetchone()[0]

			con.commit()
			
			if r == 0:
				
				
				bot.send_message(message.chat.id,"‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")
				bot.register_next_step_handler(message, promo)
			else:
				
				
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select summa from promocode where code = \'{testpromo}\'")
				summpromo = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE  from promocode where code = \'{testpromo}\'")
				con.commit()

				

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE users SET balance = {getbalance(message.chat.id)+summpromo} WHERE id = {message.chat.id}")
				con.commit()



				bot.send_message(message.chat.id,f"‚ôªÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {summpromo} RUB\n\nüí∞ –ë–∞–ª–∞–Ω—Å {getbalance(message.chat.id)+summpromo} RUB",reply_markup=user())
				bot.register_next_step_handler(message, main_message)



	except Exception as e:
		pass



@bot.message_handler(content_types=['text'])
def create_promo(message):

	try:
		if message.text.isdigit():
			summ = int(message.text)
			if summ>maxpromo:
				bot.send_message(message.chat.id,f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {maxpromo}")
				bot.register_next_step_handler(message, create_promo)
			elif summ<=0:
				bot.send_message(message.chat.id,f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
				bot.register_next_step_handler(message, create_promo)
			else:
				letters = string.ascii_letters
				codecode = ( ''.join(random.choice(letters) for i in range(10)) )
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"INSERT INTO promocode (summa,code)"
							f"VALUES ({summ},\'{codecode}\')")
				con.commit()
				bot.send_message(message.chat.id,f"ü§ë –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `{codecode}`",parse_mode='Markdown')
				bot.register_next_step_handler(message, main_message)


		else:
			bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

	except Exception as e:
		pass




@bot.message_handler(content_types=['text'])
def workstatus(message):

	
	try:

		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit() and m[1].isdigit():
				if int(m[1])==1 or int(m[1])==0 or int(m[1])==2:
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select count(*) from users where id = {m[0]}")
					est = cur.fetchone()[0]
					con.commit()
					if est == 0:
						bot.send_message(message.chat.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
						bot.register_next_step_handler(message, workstatus)
					else:

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"UPDATE users SET status = {int(m[1])} WHERE id = {int(m[0])}")
						con.commit()	


						
						bot.send_message(message.chat.id,f"–ì–æ—Ç–æ–≤–æ !",reply_markup=rem)
						bot.send_message(message.chat.id,f"üêµ –í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å",reply_markup=workerpanel())
						bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id,f"–ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å 0,1 –∏–ª–∏ 2")
					bot.register_next_step_handler(message, workstatus)		
			else:
				bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, workstatus)
		elif message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=rem)
			bot.send_message(message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={message.chat.id}</code>",reply_markup=workerpanel())	
			bot.register_next_step_handler(message, main_message)
					
		else:
			bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, workstatus)
			
	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def dobavleniebalance(message):

	
	try:

		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit() and m[1].isdigit():
				if int(m[1])>=0:
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select count(*) from users where id = {m[0]}")
					est = cur.fetchone()[0]
					con.commit()
					if est == 0:
						bot.send_message(message.chat.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
						bot.register_next_step_handler(message, dobavleniebalance)
					else:

						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"UPDATE users SET balance = {int(m[1])} WHERE id = {int(m[0])}")
						con.commit()	


						
						bot.send_message(message.chat.id,f"–ì–æ—Ç–æ–≤–æ !",reply_markup=rem)
						bot.send_message(message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={message.chat.id}</code>",reply_markup=workerpanel())	
						bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id,f"–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
					bot.register_next_step_handler(message, dobavleniebalance)		
			else:
				bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, dobavleniebalance)
		elif message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=rem)
			bot.send_message(message.chat.id,parse_mode='HTML',text=f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å\n\n<b>–°—Ç–∞—Ç—É—Å 1 -</b> <i>–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à</i>\n<b>–°—Ç–∞—Ç—É—Å 2 -</b> <i>–õ—é–±–∞—è c—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã—à</i>\n\n–§–µ–π–∫ –∫–∏–≤–∏: <code>+79502963566</code>\n–†–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>http://t.me/{bot_username}?start={message.chat.id}</code>",reply_markup=workerpanel())	
			bot.register_next_step_handler(message, main_message)
					
		else:
			bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, dobavleniebalance)
			
	except Exception as e:
		raise	

if __name__ == '__main__':
	bot.polling(none_stop=True)
